pipeline {
    agent any
    environment {
        IMAGE_NAME = 'kahanhm/flask-mongo-app'
    }
    stages {
        // Clone or Pull Repo
        stage('Clone or Pull Repo') {
            steps {
                script {
                    if (fileExists('python-App-for-CICD')) {
                        echo 'Repository already exists, pulling latest changes...'
                        sh 'cd python-App-for-CICD && git pull origin main'
                    } else {
                        echo 'Cloning the repository...'
                        sh 'git clone https://github.com/KahanHM/python-App-for-CICD.git'
                    }
                }
            }
        }

        //  Check and Install Python
        stage('Check and Install Python') {
            steps {
                script {
                    def pythonInstalled = sh(script: 'python3 --version', returnStatus: true)
                    if (pythonInstalled != 0) {
                        echo 'Python is not installed, installing Python...'
                        sh 'sudo apt-get update && sudo apt-get install -y python3'
                    } else {
                        echo 'Python is already installed.'
                    }
                }
            }
        }

        //  Check and Install Docker
        stage('Check and Install Docker') {
            steps {
                script {
                    def dockerInstalled = sh(script: 'docker --version', returnStatus: true)
                    if (dockerInstalled != 0) {
                        echo 'Docker is not installed, installing Docker...'
                        sh '''
                        sudo apt-get update
                        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                        sudo apt-get update
                        sudo apt-get install -y docker-ce
                        sudo usermod -aG docker $USER
                        '''
                    } else {
                        echo 'Docker is already installed.'
                    }
                }
            }
        }

        // Build Docker image
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image...'
                    sh '''
                    cd python-App-for-CICD/flask-mongo-app
                    sudo docker build -t $IMAGE_NAME .
                    '''
                }
            }
        }

        //  Push to Docker Hub
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_TOKEN', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        sh """
                        echo $DOCKER_TOKEN | sudo docker login -u $DOCKER_USERNAME --password-stdin
                        sudo docker push $IMAGE_NAME
                        """
                    }
                }
            }
        }

        // Install Docker on EC2 (only if necessary)
        stage('Install Docker on EC2') {
    steps {
        withCredentials([
            sshUserPrivateKey(credentialsId: 'PythonApp', keyFileVariable: 'SSH_KEY', usernameVariable: 'USER'),
            string(credentialsId: 'Host', variable: 'Host')
        ]) {
            script {
                // Check if Docker is installed using 'which docker'
                def dockerInstalled = sh(script: """
                    ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} 'which docker > /dev/null 2>&1'
                """, returnStatus: true)

                if (dockerInstalled != 0) { // If Docker is NOT installed
                    echo 'Docker is not installed, installing Docker on EC2...'
                    sh '''
                    ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} << 'EOF'
                        sudo apt-get update
                        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                        curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | sudo apt-key add -
                        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                        sudo apt-get update
                        sudo apt-get install -y docker-ce
                        sudo usermod -aG docker $USER
                        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    EOF
                    '''
                    echo 'Docker installation complete. The user may need to log out and log back in for group changes to take effect.'
                } else {
                    echo 'Docker is already installed on EC2.'
                }
            }
        }
    }
}

        

        // // Install Docker Compose on EC2 
        // stage('Install Docker Compose on EC2') {
        //     steps {
        //         withCredentials([
        //             sshUserPrivateKey(credentialsId: 'PythonApp', keyFileVariable: 'SSH_KEY', usernameVariable: 'USER'),
        //             string(credentialsId: 'Host', variable: 'Host')
        //         ]) {
        //             script {
        //                 def dockerComposeInstalled = sh(script: """
        //                     ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} 'docker-compose --version' || echo "Docker Compose not installed"
        //                 """, returnStatus: true)

        //                 if (dockerComposeInstalled != 0) {
        //                     echo 'Docker Compose is not installed, installing Docker Compose on EC2...'
        //                     sh """
        //                     ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} << 'EOF'
        //                     sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
        //                     sudo chmod +x /usr/local/bin/docker-compose
        //                     EOF
        //                     """
        //                 } else {
        //                     echo 'Docker Compose is already installed on EC2.'
        //                 }
        //             }
        //         }
        //     }
        // }

        // //  Deploy with Docker Compose and Port Forwarding
        // stage('Deploy with Docker Compose and Port Forwarding') {
        //     steps {
        //         withCredentials([
        //             sshUserPrivateKey(credentialsId: 'PythonApp', keyFileVariable: 'SSH_KEY', usernameVariable: 'USER'),
        //             string(credentialsId: 'Host', variable: 'Host')
        //         ]) {
        //             script {
        //                 echo 'Copying docker-compose.yml to EC2 instance...'
        //                 sh """
        //                 scp -o StrictHostKeyChecking=no -i ${SSH_KEY} ${WORKSPACE}/docker-compose.yml ${USER}@${Host}:/home/ubuntu/
        //                 """

        //                 echo 'Deploying application with Docker Compose...'
        //                 sh """
        //                 ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} <<EOF
        //                 cd /home/ubuntu
        //                 sudo docker-compose up -d
        //                 EOF
        //                 """

        //                 echo 'Setting up port forwarding...'
        //                 sh """
        //                 ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${USER}@${Host} <<EOF
        //                 sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 5000
        //                 EOF
        //                 """
        //             }
        //         }
        //     }
       // }
    }
}
